        now_testing        
---------------------------
 1. View AllAccountRecords
(1 row)

                             result                             
----------------------------------------------------------------
 This should find two accounts, 21 and 85, both of which are OK
(1 row)

 pid | aid |  sum  |  max  | case 
-----+-----+-------+-------+------
  50 |  21 |  7894 |  7894 | OK
  50 |  85 | -4436 | -4436 | OK
(2 rows)

                               result                               
--------------------------------------------------------------------
 This should find 21 accounts with no records (check on outer join)
(1 row)

 count 
-------
    21
(1 row)

     now_checking     
----------------------
 2. View DebtorStatus
(1 row)

          result          
--------------------------
 Should return 28 debtors
(1 row)

 count 
-------
    28
(1 row)

           result            
-----------------------------
 Two women owe more than 10K
(1 row)

 pid |        pname        | totalbalance | totaloverdraft 
-----+---------------------+--------------+----------------
 151 | Helga Ármannsdóttir |       -15296 |         101000
 113 | Ása Gunnarsdóttir   |       -10420 |         120000
(2 rows)

      now_checking       
-------------------------
 3. View FinancialStatus
(1 row)

            result            
------------------------------
 This should return 79 people
(1 row)

 count 
-------
    79
(1 row)

                       result                        
-----------------------------------------------------
 Return person 78 with 18073 as balance, 0 as unpaid
(1 row)

 pid |         pname         | ptotalbalances | ptotalunpaid 
-----+-----------------------+----------------+--------------
  78 | Friðgeir Benediktsson |          18073 |            0
(1 row)

    now_checking     
---------------------
 4. Trigger on Bills
(1 row)

             result             
--------------------------------
 This should give error on date
(1 row)

psql:SQL-TEST.sql:53: ERROR:  Function CheckBills: Date must be tomorrow or later!
CONTEXT:  PL/pgSQL function checkbills() line 20 at RAISE
              result              
----------------------------------
 This should give error on amount
(1 row)

psql:SQL-TEST.sql:62: ERROR:  Function CheckBills: Amount must be non-negative!
CONTEXT:  PL/pgSQL function checkbills() line 15 at RAISE
                     result                      
-------------------------------------------------
 This should give error as updates are forbidden
(1 row)

psql:SQL-TEST.sql:72: ERROR:  Function CheckBills: Cannot Update Bills, except for bIsPaid!
CONTEXT:  PL/pgSQL function checkbills() line 10 at RAISE
                     result                      
-------------------------------------------------
 This should give error as deletes are forbidden
(1 row)

psql:SQL-TEST.sql:82: ERROR:  Function CheckBills: Cannot Delete from Bills!
CONTEXT:  PL/pgSQL function checkbills() line 5 at RAISE
         result          
-------------------------
 This insert should work
(1 row)

            result            
------------------------------
 This should show one account
(1 row)

 count 
-------
     1
(1 row)

           result            
-----------------------------
 This should show no account
(1 row)

 count 
-------
     0
(1 row)

         now_testing          
------------------------------
 5. Trigger on AccountRecords
(1 row)

                  message                   
--------------------------------------------
 Creating a function to find bogus accounts
(1 row)

              result              
----------------------------------
 There should be 0 bogus accounts
(1 row)

 bogus 
-------
     0
(1 row)

              result              
----------------------------------
 This should give error on amount
(1 row)

psql:SQL-TEST.sql:150: ERROR:  Function CheckRecord: Amount must be available in account!
CONTEXT:  PL/pgSQL function checkrecord() line 9 at RAISE
              result              
----------------------------------
 There should be 0 bogus accounts
(1 row)

 bogus 
-------
     0
(1 row)

                     result                      
-------------------------------------------------
 This should give error as updates are forbidden
(1 row)

psql:SQL-TEST.sql:166: ERROR:  Function CheckRecord: Cannot Update or Delete from AccountRecords!
CONTEXT:  PL/pgSQL function checkrecord() line 4 at RAISE
                     result                      
-------------------------------------------------
 This should give error as deletes are forbidden
(1 row)

psql:SQL-TEST.sql:176: ERROR:  Function CheckRecord: Cannot Update or Delete from AccountRecords!
CONTEXT:  PL/pgSQL function checkrecord() line 4 at RAISE
            result             
-------------------------------
 This deposit should work fine
(1 row)

              result               
-----------------------------------
 BONUS: This should still return 0
(1 row)

 bogus 
-------
     0
(1 row)

                                 result                                  
-------------------------------------------------------------------------
 Just in case we do not get an empty result, then check it was account 5
(1 row)

 aid | pid | adate | abalance | aover | rid | aid | rdate | rtype | ramount | rbalance 
-----+-----+-------+----------+-------+-----+-----+-------+-------+---------+----------
(0 rows)

      now_testing      
-----------------------
 6. Trigger on Persons
(1 row)

         result          
-------------------------
 This insert should work
(1 row)

                              result                              
------------------------------------------------------------------
 This should return Gummi and one account with overdraft of 10000
(1 row)

 pid | pname | pgender | pheight | aid | pid |   adate    | abalance | aover 
-----+-------+---------+---------+-----+-----+------------+----------+-------
 216 | Gummi | M       |    1.74 | 115 | 216 | 2017-09-17 |        0 | 10000
(1 row)

                         result                          
---------------------------------------------------------
 This should return 0 account records for the new person
(1 row)

 count 
-------
     0
(1 row)

       now_testing        
--------------------------
 7. Function InsertPerson
(1 row)

         result          
-------------------------
 This insert should work
(1 row)

 insertperson 
--------------
 
(1 row)

                             result                             
----------------------------------------------------------------
 This should return Gummi and one account with balance of 21000
(1 row)

 pid | pname | pgender | pheight | aid | pid |   adate    | abalance | aover 
-----+-------+---------+---------+-----+-----+------------+----------+-------
 217 | Gummi | M       |    1.74 | 116 | 217 | 2017-09-17 |    21000 | 10000
(1 row)

                    result                     
-----------------------------------------------
 This should return 1 account record for Gummi
(1 row)

 rid | aid |   rdate    | rtype | ramount | rbalance 
-----+-----+------------+-------+---------+----------
 581 | 116 | 2017-09-17 | T     |   21000 |    21000
(1 row)

      now_testing       
------------------------
 8. Function PayOneBill
(1 row)

                    result                     
-----------------------------------------------
 Payment of bill 12 should work (over = 22000)
(1 row)

 payonebill 
------------
 
(1 row)

           result           
----------------------------
 Bill 12 should now be paid
(1 row)

 bid | pid |  bduedate  | bamount | bispaid 
-----+-----+------------+---------+---------
  12 |  40 | 2014-11-13 |     207 | t
(1 row)

                            result                            
--------------------------------------------------------------
 Amount of bill 12 was 207, so account balance should be -207
(1 row)

 rid | aid |   rdate    | rtype | ramount | rbalance 
-----+-----+------------+-------+---------+----------
 582 |  16 | 2017-09-17 | L     |    -207 |    -3809
(1 row)

                       message                        
------------------------------------------------------
 Making a person with two identically valued accounts
(1 row)

      result      
------------------
 Note the lastval
(1 row)

 lastval 
---------
     582
(1 row)

             result             
--------------------------------
 Payment of bill 29 should work
(1 row)

 payonebill 
------------
 
(1 row)

                        result                        
------------------------------------------------------
 Compare with the new lastval -- should be one higher
(1 row)

 lastval 
---------
     583
(1 row)

                             result                              
-----------------------------------------------------------------
 Check the accounts of PID 10 - one should be 0, the other -8405
(1 row)

 aid | pid |   adate    | abalance | aover 
-----+-----+------------+----------+-------
   5 |  10 | 2014-10-26 |        0 | 63000
  90 |  10 | 2017-09-17 |    -8405 | 63000
(2 rows)

                       result                       
----------------------------------------------------
 Payment of bill 108 should not work (already paid)
(1 row)

psql:SQL-TEST.sql:305: ERROR:  Function PayOneBill: Bill is either non-existent or already paid!
CONTEXT:  PL/pgSQL function payonebill(integer) line 11 at RAISE
                         result                         
--------------------------------------------------------
 Payment of bill 20000 should not work (does not exist)
(1 row)

psql:SQL-TEST.sql:313: ERROR:  Function PayOneBill: Bill is either non-existent or already paid!
CONTEXT:  PL/pgSQL function payonebill(integer) line 11 at RAISE
                     result                     
------------------------------------------------
 Payment of bill 3 should not work (no account)
(1 row)

psql:SQL-TEST.sql:321: ERROR:  Function PayOneBill: No account found!
CONTEXT:  PL/pgSQL function payonebill(integer) line 19 at RAISE
                          result                          
----------------------------------------------------------
 Payment of bill 107 should not work (insufficient funds)
(1 row)

psql:SQL-TEST.sql:329: ERROR:  Function CheckRecord: Amount must be available in account!
CONTEXT:  PL/pgSQL function checkrecord() line 9 at RAISE
SQL statement "INSERT INTO AccountRecords (AID, rType, rAmount)
	VALUES (MostFundedAccountID, 'L', AmountToPay)"
PL/pgSQL function payonebill(integer) line 42 at SQL statement
     now_testing      
----------------------
 9. Function Transfer
(1 row)

                          result                           
-----------------------------------------------------------
 Transfer from 8 to 2 should not work (insufficient funds)
(1 row)

psql:SQL-TEST.sql:340: ERROR:  Function CheckRecord: Amount must be available in account!
CONTEXT:  PL/pgSQL function checkrecord() line 9 at RAISE
SQL statement "INSERT INTO AccountRecords (AID, rAmount, rDate, rType) 
	VALUES (iFromAID, -iAmount, CURRENT_DATE, 'T')"
PL/pgSQL function transfer(integer,integer,integer) line 13 at SQL statement
                             result                             
----------------------------------------------------------------
 BONUS: Transfer from 2 to 8 of negative amount should NOT work
(1 row)

psql:SQL-TEST.sql:348: ERROR:  Function Transfer: Cannot transfer negative amount!
CONTEXT:  PL/pgSQL function transfer(integer,integer,integer) line 5 at RAISE
                    result                    
----------------------------------------------
 Transfer from 8 to 2 of 0 amount should work
(1 row)

 transfer 
----------
 
(1 row)

              result               
-----------------------------------
 These are the most recent entries
(1 row)

 rid | aid |   rdate    | rtype | ramount | rbalance 
-----+-----+------------+-------+---------+----------
 587 |   8 | 2017-09-17 | T     |       0 |        0
 588 |   2 | 2017-09-17 | T     |       0 |        0
(2 rows)

                  result                   
-------------------------------------------
 Transfer from 2 to 200000 should NOT work
(1 row)

psql:SQL-TEST.sql:370: ERROR:  insert or update on table "accountrecords" violates foreign key constraint "accountrecords_aid_fkey"
DETAIL:  Key (aid)=(200000) is not present in table "accounts".
CONTEXT:  SQL statement "INSERT INTO AccountRecords (AID, rAmount, rDate, rType) 
	VALUES (iFromAID, -iAmount, CURRENT_DATE, 'T')"
PL/pgSQL function transfer(integer,integer,integer) line 13 at SQL statement
      now_testing       
------------------------
 10. Function LoanMoney
(1 row)

                  result                   
-------------------------------------------
 Loaning a negative amount should not work
(1 row)

psql:SQL-TEST.sql:381: ERROR:  Function CheckBills: Amount must be non-negative!
CONTEXT:  PL/pgSQL function checkbills() line 15 at RAISE
SQL statement "INSERT INTO Bills(PID, bDueDate, bAmount, bIsPaid)
	VALUES( tPID, iDueDate, iAmount, FALSE )"
PL/pgSQL function loanmoney(integer,integer,date) line 14 at SQL statement
                   result                    
---------------------------------------------
 Loaning with due date today should not work
(1 row)

psql:SQL-TEST.sql:389: ERROR:  Function CheckBills: Date must be tomorrow or later!
CONTEXT:  PL/pgSQL function checkbills() line 20 at RAISE
SQL statement "INSERT INTO Bills(PID, bDueDate, bAmount, bIsPaid)
	VALUES( tPID, iDueDate, iAmount, FALSE )"
PL/pgSQL function loanmoney(integer,integer,date) line 14 at SQL statement
        result         
-----------------------
 This loan should work
(1 row)

 loanmoney 
-----------
 
(1 row)

              result              
----------------------------------
 The account should contain 10000
(1 row)

 aid | pid |   adate    | abalance | aover 
-----+-----+------------+----------+-------
   6 | 100 | 2017-09-17 |    10000 |  8000
(1 row)

                        result                        
------------------------------------------------------
 The most recent bill should be for 10000 for PID 100
(1 row)

 bid | pid |  bduedate  | bamount | bispaid 
-----+-----+------------+---------+---------
 342 | 100 | 2017-12-26 |   10000 | f
(1 row)

       now_testing        
--------------------------
 11. Function PayAllBills
(1 row)

                         warning                          
----------------------------------------------------------
 This is simply an example of how it is used in practice!
(1 row)

                             warning                             
-----------------------------------------------------------------
 You will need to test something like this MUCH more thoroughly!
(1 row)

 bid | pid |  bduedate  | bamount | bispaid 
-----+-----+------------+---------+---------
  40 |   1 | 2014-10-30 |    7792 | f
 224 |   1 | 2014-10-13 |    5472 | f
 225 |   1 | 2014-11-14 |    3168 | f
(3 rows)

psql:SQL-TEST.sql:422: NOTICE:  BIll paid
psql:SQL-TEST.sql:422: NOTICE:  BIll paid
psql:SQL-TEST.sql:422: NOTICE:  BIll paid
 payallbills 
-------------
 
(1 row)

 bid | pid |  bduedate  | bamount | bispaid 
-----+-----+------------+---------+---------
 224 |   1 | 2014-10-13 |    5472 | t
 225 |   1 | 2014-11-14 |    3168 | t
  40 |   1 | 2014-10-30 |    7792 | t
(3 rows)

   message   
-------------
 Cleaning up
(1 row)

psql:SQL-TEST.sql:453: NOTICE:  s = DROP VIEW public.allaccountrecords CASCADE; 
psql:SQL-TEST.sql:453: NOTICE:  s = DROP VIEW public.debtorstatus CASCADE; 
psql:SQL-TEST.sql:453: NOTICE:  drop cascades to view financialstatus
psql:SQL-TEST.sql:453: NOTICE:  s = DROP VIEW public.fs1 CASCADE; 
psql:SQL-TEST.sql:453: NOTICE:  s = DROP VIEW public.fs2 CASCADE; 
psql:SQL-TEST.sql:453: NOTICE:  Error (may already be dropped): DROP VIEW public.financialstatus CASCADE;
psql:SQL-TEST.sql:477: NOTICE:  s = DROP TRIGGER checkbills ON bills; 
psql:SQL-TEST.sql:477: NOTICE:  Error (may already be dropped): DROP TRIGGER checkbills ON bills;
psql:SQL-TEST.sql:477: NOTICE:  Error (may already be dropped): DROP TRIGGER checkbills ON bills;
psql:SQL-TEST.sql:477: NOTICE:  s = DROP TRIGGER checkrecord ON accountrecords; 
psql:SQL-TEST.sql:477: NOTICE:  Error (may already be dropped): DROP TRIGGER checkrecord ON accountrecords;
psql:SQL-TEST.sql:477: NOTICE:  Error (may already be dropped): DROP TRIGGER checkrecord ON accountrecords;
psql:SQL-TEST.sql:477: NOTICE:  s = DROP TRIGGER newperson ON people; 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.checkbills(); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.checkrecord(); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.newperson(); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.insertperson(character varying, character, double precision, integer); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.payonebill(integer); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.transfer(integer, integer, integer); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.loanmoney(integer, integer, date); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.payallbills(integer); 
psql:SQL-TEST.sql:501: NOTICE:  s = DROP FUNCTION public.findbogusaccounts(); 
